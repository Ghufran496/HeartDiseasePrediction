# -*- coding: utf-8 -*-
"""prjHeart.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KJe-KxPof_P18ILAvhxqFBdj1GFromFq

importing dependencies
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""Data collection and processing"""

#loading the csv data to pandas dataframe
heart_data = pd.read_csv('/content/heart_disease_data.csv')

# print first 5 rows of the dataset
heart_data.head()

#print last 5 rows of dataset
heart_data.tail()

# no of rows and columns in data set
heart_data.shape

#getting some info about data
heart_data.info()

#another method to check for missing values
heart_data.isnull().sum()

#statistical measures aboutt the data
heart_data.describe()

#checking the distrubution of tARGET VARIABLE
heart_data['target'].value_counts()

"""1--> defective heart
0-->healthy heart

splitting features and target
all other columns except target represents features because on them we are going to apply some model and predict that person ahs heart disease or not.
"""

X = heart_data.drop(columns='target',axis=1)
Y = heart_data['target']

print(X)

print(Y)

"""Splitting data into training ad test data"""

X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.2,stratify=Y,random_state=2)

print(X.shape,X_train.shape,X_test.shape)

X_test.head()

Y_test.head()

"""Model training using Logistic Regression Model"""

model = LogisticRegression()

#traing our model with training dataset
model.fit(X_train,Y_train)

# model evaluation using accuracy score
#accuracu on training data
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction,Y_train)

print('accuracy on training data', training_data_accuracy)

#accuracu on testing data
X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction,Y_test)

print('accuracy on test data', test_data_accuracy)

"""Building a predicted system"""

input_data = (45,1,0,142,309,0,0,147,1,0.0,1,3,3)

# change the input data to a numpy array
input_data_as_numpy_array= np.asarray(input_data)

# reshape the numpy array as we are predicting for only on instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

prediction = model.predict(input_data_reshaped)
print(prediction)

if (prediction[0]== 0):
  print('The Person does not have a Heart Disease')
else:
  print('The Person has Heart Disease')